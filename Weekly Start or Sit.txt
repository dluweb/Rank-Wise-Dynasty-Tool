<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rank Wise Dynasty - Full Prototype</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c;
            color: #e2e8f0;
        }
        .text-gold-500 { color: #d69e2e; }
        .bg-gold-500 { background-color: #d69e2e; }
        .focus\:ring-gold-500:focus { --tw-ring-color: #d69e2e; }
        .from-yellow-500 { --tw-gradient-from: #f6e05e; }
        .to-amber-600 { --tw-gradient-to: #d97706; }
        .hover\:from-yellow-600:hover { --tw-gradient-from: #d69e2e; }
        .hover\:to-amber-700:hover { --tw-gradient-to: #b45309; }
        .asset-remove-btn {
            background-color: #ef4444; color: white;
            padding: 0.25rem 0.5rem; font-size: 0.75rem;
            border-radius: 0.25rem; margin-left: 0.5rem; cursor: pointer;
        }
        .asset-remove-btn:hover { background-color: #dc2626; }
        .asset-item {
            padding: 0.75rem; border: 1px solid #4a5568;
            border-radius: 0.375rem; position: relative;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">
    <div class="container mx-auto p-4 sm:p-6 lg:p-8 flex-grow">
        <header class="text-center mb-10">
            <div class="flex flex-col items-center justify-center mb-4">
                <img src="https://via.placeholder.com/150/D69E2E/1A202C?text=RWD" alt="Rank Wise Dynasty Logo" class="w-32 h-32 sm:w-40 sm:h-40 object-contain mb-4 rounded-full shadow-lg">
                <h1 class="text-4xl sm:text-5xl font-extrabold text-white mb-2">Rank Wise Dynasty</h1>
                <p class="text-lg sm:text-xl text-gray-300">Your Edge in Dynasty Rankings</p>
            </div>
        </header>

        <section class="bg-gray-800 p-6 rounded-lg shadow-xl mb-10 max-w-2xl mx-auto">
            <h2 class="text-2xl font-bold text-white mb-6 text-center">Customize Your League Settings</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div>
                    <label for="leagueFormat" class="block text-gray-300 text-sm font-semibold mb-2">League Format:</label>
                    <select id="leagueFormat" class="w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        <option value="dynasty">Dynasty</option>
                        <option value="redraft">Redraft</option>
                    </select>
                </div>
                <div>
                    <label for="leagueType" class="block text-gray-300 text-sm font-semibold mb-2">League Type:</label>
                    <select id="leagueType" class="w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        <option value="standard">Standard</option>
                        <option value="superflex">Superflex</option>
                    </select>
                </div>
                <div>
                    <label for="pprScoring" class="block text-gray-300 text-sm font-semibold mb-2">PPR Scoring:</label>
                    <select id="pprScoring" class="w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        <option value="standard">Standard</option>
                        <option value="half-ppr">Half-PPR</option>
                        <option value="full-ppr">Full PPR</option>
                    </select>
                </div>
                <div>
                    <label for="tePremium" class="block text-gray-300 text-sm font-semibold mb-2">TE Premium:</label>
                    <select id="tePremium" class="w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        <option value="none">None</option>
                        <option value="plus-05">+0.5 PPR</option>
                        <option value="plus-10">+1.0 PPR</option>
                    </select>
                </div>
            </div>
            <button id="applySettingsBtn" class="mt-8 w-full bg-gradient-to-r from-yellow-500 to-amber-600 text-white font-bold py-3 px-6 rounded-md shadow-lg hover:from-yellow-600 hover:to-amber-700 transition duration-300 ease-in-out transform hover:scale-105">
                Apply Settings
            </button>
        </section>

        <section class="bg-gray-800 p-6 rounded-lg shadow-xl mb-10 max-w-4xl mx-auto">
            <h2 class="text-2xl font-bold text-white mb-6 text-center">Dynasty Trade Calculator</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                    <h3 class="text-xl font-semibold text-white mb-4">Your Side (You Give):</h3>
                    <div id="yourAssets" class="space-y-4">
                        <div class="asset-item player-asset">
                            <label for="yourPlayer1" class="block text-gray-300 text-sm font-semibold mb-2">Player 1:</label>
                            <input type="text" id="yourPlayer1" placeholder="Enter Player Name" class="trade-player-input w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        </div>
                        <div class="asset-item pick-asset">
                            <label class="block text-gray-300 text-sm font-semibold mb-2">Draft Pick <span class="pick-counter">1</span>:</label>
                            <div class="flex flex-wrap gap-2">
                                <select id="yourPickYear1" class="trade-pick-year-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3">
                                    <option value="">Year</option><option value="2025">2025</option><option value="2026">2026</option><option value="2027">2027</option>
                                </select>
                                <select id="yourPickRound1" class="trade-pick-round-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3">
                                    <option value="">Round</option><option value="1">1st</option><option value="2">2nd</option><option value="3">3rd</option><option value="4">4th</option><option value="5">5th</option>
                                </select>
                                <select id="yourPickDesignation1" class="trade-pick-designation-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3" style="display: none;">
                                    <option value="">Overall</option><option value="early">Early</option><option value="mid">Mid</option><option value="late">Late</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div id="yourAssetButtons" class="flex gap-2 mt-4">
                        <button data-side="your" data-type="player" class="add-asset-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md text-sm transition duration-150">Add Player</button>
                        <button data-side="your" data-type="pick" class="add-asset-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md text-sm transition duration-150">Add Pick</button>
                    </div>
                </div>
                <div>
                    <h3 class="text-xl font-semibold text-white mb-4">Their Side (You Receive):</h3>
                    <div id="theirAssets" class="space-y-4">
                         <div class="asset-item player-asset">
                            <label for="theirPlayer1" class="block text-gray-300 text-sm font-semibold mb-2">Player 1:</label>
                            <input type="text" id="theirPlayer1" placeholder="Enter Player Name" class="trade-player-input w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500">
                        </div>
                        <div class="asset-item pick-asset">
                            <label class="block text-gray-300 text-sm font-semibold mb-2">Draft Pick <span class="pick-counter">1</span>:</label>
                            <div class="flex flex-wrap gap-2">
                                <select id="theirPickYear1" class="trade-pick-year-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3">
                                    <option value="">Year</option><option value="2025">2025</option><option value="2026">2026</option><option value="2027">2027</option>
                                </select>
                                <select id="theirPickRound1" class="trade-pick-round-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3">
                                    <option value="">Round</option><option value="1">1st</option><option value="2">2nd</option><option value="3">3rd</option><option value="4">4th</option><option value="5">5th</option>
                                </select>
                                <select id="theirPickDesignation1" class="trade-pick-designation-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3" style="display: none;">
                                    <option value="">Overall</option><option value="early">Early</option><option value="mid">Mid</option><option value="late">Late</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div id="theirAssetButtons" class="flex gap-2 mt-4">
                        <button data-side="their" data-type="player" class="add-asset-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md text-sm transition duration-150">Add Player</button>
                        <button data-side="their" data-type="pick" class="add-asset-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md text-sm transition duration-150">Add Pick</button>
                    </div>
                </div>
            </div>
            <button id="analyzeTradeBtn" class="mt-8 w-full bg-gradient-to-r from-yellow-500 to-amber-600 text-white font-bold py-3 px-6 rounded-md shadow-lg hover:from-yellow-600 hover:to-amber-700 transition duration-300 ease-in-out transform hover:scale-105">
                Analyze Trade
            </button>
            <div id="tradeResult" class="mt-6 p-4 bg-blue-700 text-white rounded-md text-center hidden whitespace-pre-line"></div>
        </section>

        <section class="bg-gray-800 p-6 rounded-lg shadow-xl mb-10 max-w-4xl mx-auto">
            <h2 class="text-2xl font-bold text-white mb-6 text-center">Weekly Start/Sit Alerts</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                    <h3 class="text-xl font-semibold text-green-400 mb-4">Top Starts of the Week</h3>
                    <ul id="topStartsList" class="space-y-2">
                        <li class="text-gray-400">Loading recommendations...</li>
                    </ul>
                </div>
                <div>
                    <h3 class="text-xl font-semibold text-red-400 mb-4">Top Sits/Fades of the Week</h3>
                    <ul id="topSitsList" class="space-y-2">
                        <li class="text-gray-400">Loading recommendations...</li>
                    </ul>
                </div>
            </div>
        </section>

        <section class="bg-gray-800 p-6 rounded-lg shadow-xl max-w-4xl mx-auto">
            <h2 class="text-2xl font-bold text-white mb-6 text-center">Player Rankings</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-700">
                    <thead class="bg-gray-700">
                        <tr>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider rounded-tl-lg">Rank</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Player</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Position</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Team</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Age</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider rounded-tr-lg">Value</th>
                        </tr>
                    </thead>
                    <tbody id="player-rankings-table-body" class="bg-gray-800 divide-y divide-gray-700"></tbody>
                </table>
            </div>
            <div id="messageBox" class="mt-6 p-4 bg-blue-700 text-white rounded-md text-center hidden"></div>
        </section>
    </div>

    <script>
        // --- Global Variables ---
        let playersData = [];
        const draftPickValues = {
            '2025': { '1-early': 60, '1-mid': 55, '1-late': 50, '2-early': 40, '2-mid': 35, '2-late': 30, '3-early': 25, '3-mid': 20, '3-late': 15, '4': 10, '5': 5 },
            '2026': { '1-early': 55, '1-mid': 50, '1-late': 45, '2-early': 35, '2-mid': 30, '2-late': 25, '3-early': 20, '3-mid': 15, '3-late': 10, '4': 8, '5': 4 },
            '2027': { '1-early': 50, '1-mid': 45, '1-late': 40, '2-early': 30, '2-mid': 25, '2-late': 20, '3-early': 15, '3-mid': 10, '3-late': 8, '4': 6, '5': 3 },
        };
        let currentLeagueSettings = { leagueFormat: 'dynasty', leagueType: 'standard', pprScoring: 'standard', tePremium: 'none' };
        let assetCounters = { yourPlayer: 1, yourPick: 1, theirPlayer: 1, theirPick: 1 };

        // --- DOM Elements ---
        let applySettingsBtn, leagueFormatSelect, leagueTypeSelect, pprScoringSelect, tePremiumSelect;
        let messageBox, playerRankingsTableBody, analyzeTradeBtn, tradeResultDiv;
        let yourAssetsContainer, theirAssetsContainer;
        let topStartsList, topSitsList;


        function calculatePlayerValue(player, settings) {
            let value = 0;
            value += parseFloat(player.nextYearPoints || 0) * 0.5;
            if (settings.leagueFormat === 'dynasty') {
                const playerAge = parseInt(player.age || 30);
                if (playerAge < 25) value += (25 - playerAge) * 2;
                else if (playerAge > 28) value -= (playerAge - 28) * 1.5;
                if (player.threeYearOutlook === 'elite') value += 15;
                else if (player.threeYearOutlook === 'high') value += 7;
                if (player.contractStatus === 'rookie' || playerAge < 23) {
                    if (player.draftCapital && player.draftCapital.includes('1st_round')) value += 10;
                    else if (player.draftCapital && player.draftCapital.includes('2nd_round')) value += 5;
                }
            } else if (settings.leagueFormat === 'redraft') {
                value += parseFloat(player.snapShare || 0) * 20;
                value += (parseInt(player.offenseRank || 16) / 32) * -10;
                const sos = parseInt(player.sosRank || 16);
                if (sos > 20) value += 7;
                else if (sos < 10) value -= 7;
            }
            if (settings.leagueType === 'superflex' && player.position === 'QB') value *= 1.5;
            const receptions = parseFloat(player.receptions || 0);
            if (settings.pprScoring === 'half-ppr') value += receptions * 0.5;
            else if (settings.pprScoring === 'full-ppr') value += receptions * 1.0;
            if (player.position === 'TE') {
                if (settings.tePremium === 'plus-05') value += receptions * 0.5;
                else if (settings.tePremium === 'plus-10') value += receptions * 1.0;
            }
            return Math.max(0, parseFloat(value.toFixed(1)));
        }

        function showMessage(message, type = 'info', duration = 3000) {
            if (!messageBox) return;
            messageBox.textContent = message;
            messageBox.className = `mt-6 p-4 rounded-md text-center ${type === 'error' ? 'bg-red-700' : type === 'success' ? 'bg-green-700' : 'bg-blue-700'} text-white`;
            messageBox.style.display = 'block';
            setTimeout(() => { messageBox.style.display = 'none'; }, duration);
        }

        function updateAllPlayerRankings() {
            if (!playerRankingsTableBody || playersData.length === 0) {
                if(playerRankingsTableBody) playerRankingsTableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">No player data.</td></tr>';
                return;
            }
            playersData.forEach(player => { // Ensure calculatedValue is up-to-date
                player.calculatedValue = calculatePlayerValue(player, currentLeagueSettings);
            });
            const rankedPlayers = [...playersData].sort((a, b) => b.calculatedValue - a.calculatedValue);
            playerRankingsTableBody.innerHTML = '';
            rankedPlayers.forEach((player, index) => {
                const row = playerRankingsTableBody.insertRow();
                row.className = 'hover:bg-gray-700 transition duration-150 ease-in-out';
                row.innerHTML = `<td class="px-4 py-4 text-sm font-medium text-white">${index + 1}</td><td class="px-4 py-4 text-sm text-gray-300">${player.name}</td><td class="px-4 py-4 text-sm text-gray-300">${player.position}</td><td class="px-4 py-4 text-sm text-gray-300">${player.team}</td><td class="px-4 py-4 text-sm text-gray-300">${player.age}</td><td class="px-4 py-4 text-sm text-yellow-400 font-bold">${player.calculatedValue}</td>`;
            });
        }

        function getDraftPickValue(year, round, designation = '') {
            if (currentLeagueSettings.leagueFormat === 'redraft' && year !== '2025') return 0;
            if (draftPickValues[year]) {
                let pickKey = round.toString();
                if (designation && (round === '1' || round === '2' || round === '3')) pickKey = `${round}-${designation}`;
                if (draftPickValues[year][pickKey]) return draftPickValues[year][pickKey];
            }
            return 0;
        }

        function getPlayerValueByName(playerName) {
            const player = playersData.find(p => p.name && p.name.toLowerCase() === playerName.toLowerCase());
            return player ? (player.calculatedValue !== undefined ? player.calculatedValue : calculatePlayerValue(player, currentLeagueSettings)) : 0;
        }

        function createAssetHTML(side, type, count, assetGroupId) {
            const uniqueSuffix = assetGroupId; // Use the passed unique ID for elements
            let html = `<div class="asset-item ${type}-asset space-y-2 mb-3 relative">`;
            if (type === 'player') {
                html += `<div><label for="playerInput_${uniqueSuffix}" class="block text-gray-300 text-sm font-semibold mb-1">Player ${count}:</label><input type="text" id="playerInput_${uniqueSuffix}" placeholder="Enter Player Name" class="trade-player-input w-full p-3 rounded-md bg-gray-600 border border-gray-500 text-white focus:outline-none focus:ring-2 focus:ring-gold-500"></div>`;
            } else if (type === 'pick') {
                html += `<div><label class="block text-gray-300 text-sm font-semibold mb-1">Draft Pick <span class="pick-counter">${count}</span>:</label><div class="flex flex-wrap gap-2"><select id="pickYear_${uniqueSuffix}" class="trade-pick-year-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3"><option value="">Year</option><option value="2025">2025</option><option value="2026">2026</option><option value="2027">2027</option></select><select id="pickRound_${uniqueSuffix}" class="trade-pick-round-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3"><option value="">Round</option><option value="1">1st</option><option value="2">2nd</option><option value="3">3rd</option><option value="4">4th</option><option value="5">5th</option></select><select id="pickDesignation_${uniqueSuffix}" class="trade-pick-designation-select p-3 rounded-md bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-gold-500 flex-grow sm:flex-grow-0 sm:w-1/3" style="display: none;"><option value="">Overall</option><option value="early">Early</option><option value="mid">Mid</option><option value="late">Late</option></select></div></div>`;
            }
            html += `<button type="button" class="asset-remove-btn absolute top-1 right-1" title="Remove Asset">×</button></div>`;
            return html;
        }

        function addAsset(side, type) {
            const assetContainer = document.getElementById(`${side}Assets`);
            if (!assetContainer) return;
            const counterKey = `${side}${type.charAt(0).toUpperCase() + type.slice(1)}`;
            assetCounters[counterKey]++;
            const assetGroupId = `${side}_${type}_${Date.now()}_${assetCounters[counterKey]}`;
            const newAssetHTML = createAssetHTML(side, type, assetCounters[counterKey], assetGroupId);
            const newAssetElementWrapper = document.createElement('div');
            newAssetElementWrapper.innerHTML = newAssetHTML;
            const actualAssetDiv = newAssetElementWrapper.firstChild;
            assetContainer.appendChild(actualAssetDiv);
            const removeBtn = actualAssetDiv.querySelector('.asset-remove-btn');
            if (removeBtn) removeBtn.addEventListener('click', function() { this.closest('.asset-item').remove(); });
            if (type === 'pick') {
                const roundSelect = actualAssetDiv.querySelector('.trade-pick-round-select');
                const designationSelect = actualAssetDiv.querySelector('.trade-pick-designation-select');
                if (roundSelect && designationSelect) {
                    roundSelect.addEventListener('change', function() {
                        const selectedRound = this.value;
                        if (selectedRound === '1' || selectedRound === '2' || selectedRound === '3') designationSelect.style.display = 'block';
                        else { designationSelect.style.display = 'none'; designationSelect.value = ''; }
                    });
                }
            }
        }
        
        function setupInitialPickDesignationListeners() {
            document.querySelectorAll('.pick-asset').forEach(pickDiv => {
                const roundSelect = pickDiv.querySelector('.trade-pick-round-select');
                const designationSelect = pickDiv.querySelector('.trade-pick-designation-select');
                if (roundSelect && designationSelect) {
                    const updateVisibility = () => {
                        const selectedRound = roundSelect.value;
                        if (selectedRound === '1' || selectedRound === '2' || selectedRound === '3') designationSelect.style.display = 'block';
                        else { designationSelect.style.display = 'none'; designationSelect.value = '';}
                    };
                    updateVisibility(); // Initial check
                    roundSelect.addEventListener('change', updateVisibility);
                }
            });
        }

        function analyzeTrade() {
            if (!yourAssetsContainer || !theirAssetsContainer || !tradeResultDiv) return;
            let yourTotalValue = 0, theirTotalValue = 0;
            let yourAssetsDetail = [], theirAssetsDetail = [];
            yourAssetsContainer.querySelectorAll('.player-asset .trade-player-input').forEach(input => {
                const playerName = input.value.trim();
                if (playerName) { const value = getPlayerValueByName(playerName); yourTotalValue += value; yourAssetsDetail.push(`${playerName} (${value.toFixed(1)})`); }
            });
            yourAssetsContainer.querySelectorAll('.pick-asset').forEach(pickDiv => {
                const yearSelect = pickDiv.querySelector('.trade-pick-year-select');
                const roundSelect = pickDiv.querySelector('.trade-pick-round-select');
                const designationSelect = pickDiv.querySelector('.trade-pick-designation-select');
                if (yearSelect && roundSelect && yearSelect.value && roundSelect.value) {
                    let dVal = (designationSelect && (roundSelect.value === '1' || roundSelect.value === '2' || roundSelect.value === '3')) ? designationSelect.value : '';
                    const value = getDraftPickValue(yearSelect.value, roundSelect.value, dVal);
                    yourTotalValue += value;
                    let pDet = `Pick ${yearSelect.value}-${roundSelect.value}${dVal ? ` (${dVal})` : ''} (${value.toFixed(1)})`;
                    yourAssetsDetail.push(pDet);
                }
            });
            theirAssetsContainer.querySelectorAll('.player-asset .trade-player-input').forEach(input => {
                const playerName = input.value.trim();
                if (playerName) { const value = getPlayerValueByName(playerName); theirTotalValue += value; theirAssetsDetail.push(`${playerName} (${value.toFixed(1)})`); }
            });
            theirAssetsContainer.querySelectorAll('.pick-asset').forEach(pickDiv => {
                const yearSelect = pickDiv.querySelector('.trade-pick-year-select');
                const roundSelect = pickDiv.querySelector('.trade-pick-round-select');
                const designationSelect = pickDiv.querySelector('.trade-pick-designation-select');
                if (yearSelect && roundSelect && yearSelect.value && roundSelect.value) {
                    let dVal = (designationSelect && (roundSelect.value === '1' || roundSelect.value === '2' || roundSelect.value === '3')) ? designationSelect.value : '';
                    const value = getDraftPickValue(yearSelect.value, roundSelect.value, dVal);
                    theirTotalValue += value;
                    let pDet = `Pick ${yearSelect.value}-${roundSelect.value}${dVal ? ` (${dVal})` : ''} (${value.toFixed(1)})`;
                    theirAssetsDetail.push(pDet);
                }
            });
            let resultMessage = '', messageType = 'info';
            const difference = theirTotalValue - yourTotalValue;
            const yStr = `Your Side (${yourTotalValue.toFixed(1)}): ${yourAssetsDetail.join(', ') || 'N/A'}`;
            const tStr = `Their Side (${theirTotalValue.toFixed(1)}): ${theirAssetsDetail.join(', ') || 'N/A'}`;
            if (Math.abs(difference) < 5) { resultMessage = `Trade is Fair!\n${yStr}\n${tStr}`; messageType = 'success'; }
            else if (difference > 0) { resultMessage = `Trade favors YOUR side! Gain ${difference.toFixed(1)}.\n${yStr}\n${tStr}`; messageType = 'success'; }
            else { resultMessage = `Trade favors THEIR side! Lose ${Math.abs(difference).toFixed(1)}.\n${yStr}\n${tStr}`; messageType = 'error'; }
            tradeResultDiv.innerText = resultMessage;
            tradeResultDiv.className = `mt-6 p-4 rounded-md text-center whitespace-pre-line ${messageType === 'error' ? 'bg-red-700' : messageType === 'success' ? 'bg-green-700' : 'bg-blue-700'} text-white`;
            tradeResultDiv.style.display = 'block';
        }

        function getWeeklyRecommendations(allPlayers, count = 10) {
            const ratedPlayers = allPlayers.filter(p => p.weeklyMatchupRating !== undefined && p.weeklyMatchupRating !== null && p.weeklyMatchupRating !== '');
            const potentialStarts = [...ratedPlayers].sort((a, b) => parseFloat(b.weeklyMatchupRating) - parseFloat(a.weeklyMatchupRating) || (b.calculatedValue || 0) - (a.calculatedValue || 0));
            const potentialSits = [...ratedPlayers].sort((a, b) => parseFloat(a.weeklyMatchupRating) - parseFloat(b.weeklyMatchupRating) || (b.calculatedValue || 0) - (a.calculatedValue || 0));
            
            let starts = potentialStarts.filter(p => parseFloat(p.weeklyMatchupRating) >= 4).slice(0, count);
            if (starts.length < count) {
                starts = starts.concat(potentialStarts.filter(p => parseFloat(p.weeklyMatchupRating) === 3 && !starts.find(s=>s.id === p.id)).slice(0, count - starts.length));
            }
            let sits = potentialSits.filter(p => parseFloat(p.weeklyMatchupRating) <= 2).slice(0,count);
             if (sits.length < count) {
                sits = sits.concat(potentialSits.filter(p => parseFloat(p.weeklyMatchupRating) === 3 && !sits.find(s=>s.id === p.id)).slice(0, count - sits.length));
            }
            return { starts: starts.slice(0,count), sits: sits.slice(0,count) };
        }

        function displayWeeklyRecommendations(recommendations) {
            if (!topStartsList || !topSitsList) return;
            topStartsList.innerHTML = ''; topSitsList.innerHTML = '';
            if (recommendations.starts.length === 0 && recommendations.sits.length === 0) {
                topStartsList.innerHTML = '<li class="text-gray-400">No specific recommendations.</li>';
                topSitsList.innerHTML = '<li class="text-gray-400">No specific recommendations.</li>'; return;
            }
            recommendations.starts.forEach(p => { const li = document.createElement('li'); li.className = 'py-2 px-3 bg-gray-700 rounded-md mb-2 shadow'; li.innerHTML = `<div class="font-semibold text-white">${p.name} (${p.position} - ${p.team})</div><div class="text-sm text-green-400">Matchup Rating: ${p.weeklyMatchupRating}</div>${p.weeklyMatchupNotes ? `<div class="text-xs text-gray-300 italic mt-1">Note: ${p.weeklyMatchupNotes}</div>` : ''}`; topStartsList.appendChild(li); });
            if (recommendations.starts.length === 0) topStartsList.innerHTML = '<li class="text-gray-400">No strong starts.</li>';
            recommendations.sits.forEach(p => { const li = document.createElement('li'); li.className = 'py-2 px-3 bg-gray-700 rounded-md mb-2 shadow'; li.innerHTML = `<div class="font-semibold text-white">${p.name} (${p.position} - ${p.team})</div><div class="text-sm text-red-400">Matchup Rating: ${p.weeklyMatchupRating}</div>${p.weeklyMatchupNotes ? `<div class="text-xs text-gray-300 italic mt-1">Note: ${p.weeklyMatchupNotes}</div>` : ''}`; topSitsList.appendChild(li); });
            if (recommendations.sits.length === 0) topSitsList.innerHTML = '<li class="text-gray-400">No strong sits/fades.</li>';
        }
        
        async function loadPlayerDataFromCSV(csvPathOrData) {
            try {
                let csvText;
                if (typeof csvPathOrData === 'string' && csvPathOrData.includes('\n') && csvPathOrData.includes(',')) csvText = csvPathOrData;
                else if (typeof csvPathOrData === 'string') { const response = await fetch(csvPathOrData); if (!response.ok) throw new Error(`HTTP error! status: ${response.status} for ${csvPathOrData}`); csvText = await response.text(); }
                else throw new Error("Invalid CSV source.");
                const lines = csvText.split('\n').map(line => line.trim()).filter(line => line !== '');
                if (lines.length < 2) return [];
                const headers = lines[0].split(',').map(header => header.trim());
                const data = [];
                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(value => value.trim());
                    if (values.length === headers.length) {
                        const playerObject = {};
                        headers.forEach((header, index) => {
                            const value = values[index];
                            if (['age', 'nextYearPoints', 'receptions', 'snapShare', 'sosRank', 'offenseRank', 'weeklyMatchupRating'].includes(header)) {
                                playerObject[header] = parseFloat(value);
                                if (isNaN(playerObject[header])) playerObject[header] = (header === 'weeklyMatchupRating' ? 3 : 0); // Default for NaN
                            } else playerObject[header] = value;
                        });
                        data.push(playerObject);
                    } else console.warn(`Skipping malformed CSV line ${i + 1}: ${lines[i]}`);
                }
                return data;
            } catch (error) { console.error("Error loading CSV:", error); showMessage(`Error loading player data: ${error.message}`, 'error', 7000); return []; }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            applySettingsBtn = document.getElementById('applySettingsBtn');
            leagueFormatSelect = document.getElementById('leagueFormat');
            leagueTypeSelect = document.getElementById('leagueType');
            pprScoringSelect = document.getElementById('pprScoring');
            tePremiumSelect = document.getElementById('tePremium');
            messageBox = document.getElementById('messageBox');
            playerRankingsTableBody = document.getElementById('player-rankings-table-body');
            analyzeTradeBtn = document.getElementById('analyzeTradeBtn');
            tradeResultDiv = document.getElementById('tradeResult');
            yourAssetsContainer = document.getElementById('yourAssets');
            theirAssetsContainer = document.getElementById('theirAssets');
            topStartsList = document.getElementById('topStartsList');
            topSitsList = document.getElementById('topSitsList');

            const sampleCsvData = `id,name,position,team,age,nextYearPoints,receptions,snapShare,threeYearOutlook,contractStatus,draftCapital,sosRank,offenseRank,injuryHistory,weeklyMatchupRating,weeklyMatchupNotes
mahomes_p,Patrick Mahomes,QB,KC,29,350,1,0.95,elite,long-term,1st_round_top_10,11,2,low,5,vs LV pass D
mccaffrey_c,Christian McCaffrey,RB,SF,29,300,80,0.85,high,long-term,1st_round_top_10,32,1,moderate,4,Solid floor
chase_j,Ja'Marr Chase,WR,CIN,25,320,100,0.90,elite,long-term,1st_round_top_10,14,8,low,2,Elite CB matchup
kelce_t,Travis Kelce,TE,KC,35,180,90,0.80,low,expiring,3rd_round,11,2,low,3,
nabers_m,Malik Nabers,WR,NYG,22,200,70,0.75,elite,rookie,1st_round_top_5,1,28,low,5,Top target vs weak secondary
stroud_c,CJ Stroud,QB,HOU,23,310,2,0.92,elite,rookie,1st_round_top_5,15,7,low,4,
bijan_r,Bijan Robinson,RB,ATL,22,250,50,0.70,high,rookie,1st_round_top_10,20,17,low,1,Stout run D and low volume
jefferson_j,Justin Jefferson,WR,MIN,25,330,110,0.93,elite,long-term,1st_round,7,11,low,3,QB questions
allen_j,Josh Allen,QB,BUF,29,330,3,0.98,elite,long-term,1st_round,23,5,low,5,Always a start
stbrown_a,Amon-Ra St. Brown,WR,DET,25,300,110,0.92,high,long-term,4th_round,3,4,low,4,
laporta_s,Sam LaPorta,TE,DET,23,200,85,0.85,elite,rookie,2nd_round,3,4,low,2,Tough LB coverage`;
            
            //playersData = await loadPlayerDataFromCSV('players_data.csv'); // UNCOMMENT THIS TO USE EXTERNAL CSV
            playersData = await loadPlayerDataFromCSV(sampleCsvData); // COMMENT THIS OUT TO USE EXTERNAL CSV

            if (playersData.length > 0) {
                updateAllPlayerRankings();
                const weeklyRecs = getWeeklyRecommendations(playersData, 10);
                displayWeeklyRecommendations(weeklyRecs);
                showMessage('Player data loaded!', 'success', 4000);
            } else {
                showMessage('No player data. Check CSV or console.', 'error', 7000);
            }
            
            setupInitialPickDesignationListeners();

            applySettingsBtn.addEventListener('click', () => {
                currentLeagueSettings.leagueFormat = leagueFormatSelect.value;
                currentLeagueSettings.leagueType = leagueTypeSelect.value;
                currentLeagueSettings.pprScoring = pprScoringSelect.value;
                currentLeagueSettings.tePremium = tePremiumSelect.value;
                updateAllPlayerRankings(); // This will recalculate values for all players
                const weeklyRecs = getWeeklyRecommendations(playersData, 10); // Re-evaluate weekly recs as base values changed
                displayWeeklyRecommendations(weeklyRecs);
                showMessage('Settings Applied.', 'success');
            });
            analyzeTradeBtn.addEventListener('click', analyzeTrade);
            document.querySelectorAll('.add-asset-btn').forEach(button => {
                button.addEventListener('click', () => { const side = button.dataset.side; const type = button.dataset.type; addAsset(side, type); });
            });
        });
    </script>
</body>
</html>